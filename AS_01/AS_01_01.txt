[画面:pic01-01.png 「Unity」(キャプション)]
　こんにちわ！ユニティ・テクノロジーズ・ジャパンのエバンジェリストの伊藤周と申します。「エバンジェリスト」というと聞き慣れないかもしれませんが、直訳すると「宣教師」ですね。ザビエルです。というわけで、Unityというソフトウェアを皆さんに使っていただくように普及するという役割ということなのです。では「Unity」とは何か、と言いますと一言で言うと「誰でも使えるゲーム開発統合環境」となります。ただ最近ではゲーム開発以外にも利用されている例が多くなってきてまして、医療、建築、教育、自動車、というあらゆる産業で使われ始めています。なぜここまで広まっているかというと、最近のスマートフォン等のデジタルデバイスで、3D表現を使いたいという要望が大変多いからなのですね。そして驚くことに全て無料で作れるという（個人開発限定ではありますが）ことも忘れてはなりません。
　この連載では、何もUnityのことを知らない美人編集秋山女史に、Unityのことに関して詳しくないこともないUnity仮面が、Unityを教える形で進めて行きます。ただ、Unityを教えるだけでは面白くないので、この連載ではUnityの特徴でもある「Asset Store」という仕組みを使って、出来るだけ楽してゲームを作ることを目標とします。

仮面：ダァす！Unity仮面だ！
秋山：こんにちわ、編集の秋山です。あのー、Unity仮面さん、私ゲーム作りたいんですけど
仮面：いきなりだな。普通はこういうとき前置きを説明するのだが...。まあいい、アキヤマよ。それでUnityでどんなゲームが作りたいのだ？
秋山：うーん、あんまりよくわからないんですよね。
仮面：...（遠い目）　貴様...作りたいものがないのに、軽々しく作りたいとかいうなー！！
秋山：まあいいじゃないですか、それは、おいおい考えるとして
仮面：はあはあ...それでいいのか...？
秋山：えーと。それで、どうすればいいんですか？
仮面：じゃあまず、Asset Storeを…。ってアキヤマ！Unityインストールしてないじゃないかっ！
秋山：はい。そこからお願いします。
仮面；そこからか...（白目）

【Unityダウンロードの説明】
[画面:pic01-02.png 「Unityのダウンロード」(キャプション)]
いきなりハイテンションで始まりましたね。さて、Unityのインストールですが、とりあえず、ココのサイト（http://japan.unity3d.com/unity/download/ ）から最新版Unityのインストーラーをダウンロードできます。ダウンロードを完了したらダブルクリックでインストールが始まります。ライセンス使用許諾を読んで、インストールしていきましょう。途中でアカウントも聞かれますが、名前、メールアドレス、パスワードを入力して、アカウントを作って下さい。インストールが完了したら、早速Unityを起動してみましょう。最初にライセンスの種類を聞かれますが、個人開発の方は「Activate the free version of Unity」をチェックして進めて下さい。

秋山：はい、起動しましたよ、Unity仮面さん。
仮面：よしアキヤマ。じゃあUnityの操作をざっと説明して行く。
秋山：はい、でも私、あんまりプログラムとかわからないですよ。
仮面：大丈夫だアキヤマ。Unityはな...
秋山：はい
仮面：（クワッ）プログラムを書けなくてもなんとかなる！　<font size=small>最初はな（小声）</font>
秋山：そうなんですか？安心しました。私、全角と半角の区別がつかないくらいなんですよー
仮面：そ、それはそれでちゃんと区別しようぜ...

---
【Unityエディタの説明】
[画面:pic01-03.png 「Unityエディタ」(キャプション)]
Unityには５つのビューがあります。いったん見え方を揃えるために右上の「Default」となっている項目を「2 by 3」にして下さい。
１、シーンビュー
シーンビューには製作中のゲームの世界（シーン）が表示され、自由な位置・角度から眺めることができます。このビューでゲームの世界を構築していきます。

２、ゲームビュー
実際のゲーム画面が表示されます。上のシーンビューは開発過程で使う画面でものを配置することができますが、こちらのゲームビューはゲームを動かすだけになります。例えばiPhone用ゲームを作る際は、iPhoneでみる画面と同じものがゲームビューに表示されます。

３、ヒエラルキー
シーンに存在する全てのゲームオブジェクトがこの画面で確認ができます。

４、プロジェクトブラウザ
このゲームに含まれるプログラムやデータ全てがここで確認できます。ファイルシステムと同じですので、エクスプローラーやファインダーからも同じものがみれます。

５、インスペクター
選択されたゲームオブジェクトの属性（Unityではコンポーネントと呼ぶ）が表示され、編集することもできます。どのゲームオブジェクトにも位置、回転、スケールのコンポーネントが存在します。カメラにはカメラの、球なら球表示のコンポーネントがついています。そしてこのコンポーネントを作ることがUnityにおけるプログラミングになります。

ビューに関しては詳しくはこちら（ http://docs-jp.unity3d.com/Documentation/Manual/LearningtheInterface.html ）をご参照ください。

次にシーンビューでの操作を説明します。このシーンビューでの操作を覚えると、その後の操作が楽になるので、是非ここで覚えてください。
[画面:pic01-04.png 「シーンビューでのカメラ操作」(キャプション)]

１、ゲームオブジェクトへのフォーカス
ゲームビューで（またはヒエラルキーで）、なんらかのゲームオブジェクトを選択して、「F」キー（Focusの頭文字）を押すことで、そのゲームオブジェクトが中心の位置にカメラが移動します。

２、カメラの角度の操作
Alt(MacはOption)を押しながらドラッグで、カメラが回り込むような動きになります。

３、カメラのズームインズームアウト
マウスホイールを前にするとズームイン、後ろに回すとズームアウトになります。

４、カメラの平行移動
マウスホイールボタンを押しながらドラッグすると、カメラが平行移動します。

シーンビューでは以上の４つの操作でだいたいカメラを操作できます。特に「F」キーによるフォーカス操作は重要なので、覚えてください。

それと念のために補足しますが、Unity仮面はプログラム書けなくてもなんとかなるとか言っていますが、ある程度はプログラム出来なくてもなんとかなりますよ、という話です。もちろん、ゲーム作るとなったらプログラミングの知識は必要になりますよ。

---

仮面：でだ、アキヤマ。Asset Storeというのは知っているか？
秋山：まあだいたいは...。Unityのオンラインショップですよね？楽天みたいな。
仮面：だぁ！全然違ーう！Asset Storeというのは、Unityで使うツールとか3Dモデルとかサウンドとか、ゲームに使われるありとあらゆるものが販売されているのだ。
秋山：へー。あ、そういうものなんですか。
仮面：つまりこれを使えば、自分で作らなくてもいいということだ。
秋山：でもそれってズルじゃないですか？
仮面：あ？
秋山：だって人の作ったのをそのまま使ったりしたらパクりですよ。
仮面：アキヤマ、いいか...ひとつ良いことを教えてやる。
秋山：はい、なんですか？
仮面：<font size=big>（クワッ）Asset Store で買ったものはパクり放題だ！</font>
秋山：えええ！！
仮面：自分のゲームに使っていいっていうライセンスなのだよ！
秋山：そうなんですか？なんかステマっぽいやり取りですけど。

【Asset Store の説明】
[画面:pic01-05.png 「Unity Asset Store」(キャプション)]
Unity Asset Store はUnityのメニューから「Window」→「Asset Store」から開けます。そこにはありとあらゆるツールが販売されております。これらは世界中の開発者が販売しているものです。やろうと思えば、あなた自身も商品を販売することも出来ます。
商品は様々で、プログラムから、ツール、3Dモデルデータ、アニメーション、サウンド、音楽、エフェクトなどが販売されいます。
価格は無料から$100程度（日本円で１万円程度）ですので、気軽に購入することも出来ます。たまにセールも行われて50%オフもされるので、毎日チェックされることをお勧めします。
Unity仮面も触れていますが、Asset Storeで買った商品は全て商用が可能です。ですので、気に入った商品があれば、是非購入して自分の手間を省いて下さい。

仮面：そして、今回はその中から超有名アイテムの「Playmaker」を紹介する。
秋山：「ぷれいめいかー」？
仮面：これはUnityエディタ上で状態遷移図を使って、プログラミングすることなく、イロイロなオブジェクトの動きを付けられるというものだ。
秋山：「じょうたいせんい」？
仮面：...分かってない様子だな...。よろしい。アキヤマは自動ドアを知ってるか？
秋山：はい。普通の現代人なら知ってると思いますけど。
仮面：あの人が近づくと開く、という仕組みあるだろう？あれも状態遷移だ。
秋山：え？どういうことですか？

【状態遷移の説明】
[画面:pic01-06.png 「状態遷移図」(キャプション)]
自動ドアの最初の状態は「Closed」つまり、閉まっているわけ状態です。そこに何か物体を検知したら「Opened」状態に遷移します。そして時間が経って、かつ物体が検知しなかったら「Closed」状態に戻るということです。これらの一連の仕組みを状態遷移といい、上記の図を状態遷移図と言います。

仮面：つまり、Playmakerでこの状態遷移図を作っていけば、3D空間に自動ドアのような仕組みは簡単に作れるということだ。
秋山：へー、じゃあ早速作ってみましょう。
仮面：その前に、まずは Asset Store で Playmaker を購入だ。
秋山：えー、お金いるんですか？
仮面：ちょ！おま！このPlaymaker の作者様がどんだけこれを作るために時間を費やしたかわかってんのか！！！
秋山：まあまあ。Unityって無料なので、これも無料かと思っただけですよ。
仮面：はあ、はあ...。まあいい。価格はたったの$90だ。（価格はセールによって変わりますので実際のか価格はこちら http://u3d.as/content/hutong-games-llc/playmaker/1Az でご確認ください）
秋山：うーん、ちょっとキツいですねえ...。
仮面：貴様...
秋山：わかりましたよ、買いますよー

【Asset Store の購入の説明】
[画面:pic01-07-01.png,pic01-07-02.png,pic01-07-03.png(まとめて) 「状態遷移図」(キャプション)]
１、「Buy」をクリック（ここでUnityアカウントがない場合はアカウントを作り、ログイン）
２、「Checkout Now」をクリック
３、クレジット情報を入れる。「Credit Card Type」はカードの種類、「Card Number」はカード番号、「Card Security Code」はカード裏面にあるセキュリティコード、「Card Expiration Month」「Card Expiration Year」はカード期限の月と年、「Billing Address」に住所をそれぞれ入力。
またはPaypalを使えるのであれば、「Payment Method」を「Paypal」に変更。
４、「Purchase」をクリック
５、課金処理が正常に終わると、先ほどの「Buy」ボタンが「Download」に変わるので、そのボタンを押しダウンロード
６、ダウンロードが終了すると、ウィンドウが出てくるので、右下の「Import」で自分のプロジェクトに持ってくることができます。

秋山：領収書、落ちるのかな...
仮面：アキヤマ。自腹で行け。
秋山：えーやですよー
仮面：身銭を切るということは、それだけの覚悟を背負うということだ。
秋山：何、格好いいことを言った気になってるんですか。
仮面：確かに9000円は安い額ではないが、手が出せない額じゃない。飲み会３回我慢すればいいという金額だからな。
秋山：（...どんだけ安い居酒屋に行ってるの？）

【Playmaker】
[画面:pic01-08.png 「Playmaker」(キャプション)]
仮面：さて、アキヤマ。ようやくPlaymakerを教える時が来た。
秋山：はい。長かったです。待ちくたびれました。
仮面：お前がUnityをインストールしてないからだろ！...まあいい。じゃあまずはメニューの「File」→「New Scene」で新しいシーンから作って行こうか。
秋山：はい、「New Scene」と...なんかでますけど。
仮面：それは保存するかどうか聞かれているだけだから、「Don't Save」でいい。そうしたら、上の「PlayMaker」→「PlayMaker Editor」を選択だ。
秋山：はい。あ、なんか出ましたよ。
仮面：「ようこそ」画面はオフにして、それじゃない左上のタブが「playMaker」のウィンドウがPlayMaker エディタだ。ここで状態遷移図を作っていくのだ。
秋山：ああ、さっき自動ドアの例で説明に出てきたアレですね。
仮面：そうアレだ。そうそうPlaymaker のナイスな点として、日本語の表示に切り替えができるという点だ。
秋山：あ、それはイイですね！私英語はまるっきりできないので！
仮面：切り替える方法は簡単で、Playmaker エディタの右下のタブの「Prefarence」を選択して「Language (beta)」という項目を「English」から「Japanese」に変更すればOKだ.（注：最初から日本語になっている場合もあります）
秋山：あ、変わった！これ見やすくていいですね！Unityも日本語のメニューならいいのに。
仮面：まあ、それは言うな。中の人もイロイロ大変なのだ。じゃあ、とりあえず「GameObject」→「Create Other」→「Cube」で適当な立方体を出してみよう。
秋山：...「Cube」と。あ、なんか出ましたよ。
仮面：あと、「GameObject」→「Create Other」→「Directional Light」でライトを点けようか。
秋山：...ライトを、つけまし、たと。
仮面：じゃあ、準備OKということで、Playmaker を操作して行こう

【Playmaker で簡単な状態遷移を作ってみる】
[画面:pic01-09.png 「Playmakerエディタ」(キャプション)]
１、まず、状態遷移を付けたいオブジェクトをヒエラルキーかシーンビューで選択します。
２、そして、Playmakerエディタの左の画面内で、右クリックして「Add State/状態遷移を追加」を選択して、状態遷移を追加します。
３、「State 1」が作られたと思いますが、これを選択して、右の画面で名前を「Initital」に変更しましょう。最初の状態、という意味です。
４、同様にもうひとつ状態を作ってみましょう。今度は名前を「Moving」にしましょう。つまり動いている状態を作ったわけですね。
５、「Moving」を選択し、「Action Browser/アクションブラウザ」をクリックすることで、アクションブラウザが立ち上がります。タブ動かして、適当なウィンドウに当てはめましょう。
６、アクションブラウザで「Transform」というカテゴリの「Rotate」を選択し、下の「Add Action To State/状態をアクションに追加」をクリックして、アクションを追加します。「アクション」というのはその名の通り何らかのアクションを追加します。ここでは「回転」というアクションを追加しました。ちなみにアクションは複数登録することも可能です。
７、PlaymakerエディタにRotateアクションが付加されたと思いますが、その中で「Y Angle」を「180」、「Per second」をチェックしてください。（つまり1秒間にY軸180度の回転しろ、という意味です）
８、そして、次は遷移を作ります。「Initial」を右クリックし、「Add Transision / 遷移を追加」→「System Events」→「MOUSE DOWN」を選択すると、遷移が追加されます。これは「マウスを押されれば遷移するよ」という条件です。
９、すると赤い「！」が点くと思いますが、これがあるというのは、何かどこかに間違いがあるということです。今回は「遷移があるけど、矢印で繋がっていない」ということですので、「MOUSE DOWN」をクリックして、矢印を「Moving」まで持っていき、そこでもう一度クリックしましょう。それで矢印が繋がり、赤い「！」がなくなるはずです。つまり、これで「初期状態」→「ボタンを押す」→「回転する」という一連の状態遷移が完成したということです。

仮面：さあ、これで一番簡単な状態遷移はできた。さあプレイしてみよう。上の「▶」をクリックしてプレイしてくれ。
秋山：はい、クリックと。あれ？なんか何も出ませんけど。
仮面：あ、そうか。Cubeの位置は原点にしていなかったか。じゃあ一回止めて。
秋山：はい。これをクリックしてと...
仮面：で、Cubeをヒエラルキーで選択して、インスペクターで一番上の方の「Transform」の「Position」をXYZ全てゼロにするのだ。
秋山：はい。しました。
仮面：それでもう一回プレイしてみてくれ。
秋山：あ、四角が今度は真ん中に出ましたよ。
仮面：それをクリックすると...
秋山：あ、回転した。すごーい、これだけでこんなことできるんですね。
仮面：じゃあ、次のアクションはアキヤマが決めろ。どうしたい？このCubeを。なんでもできるぞ。
秋山：そーですねー、じゃあフリック操作で左右に動かせて、上フリックでジャンプできるようにしてください。
仮面：お、おう...。できるにはできるが...。アキヤマ、モノは相談だが...
秋山：はい？
仮面：クリックするとジャンプする、程度で手打ちにしてもらえないだろうか。
秋山：はあ...

【Playmaker で簡単な状態遷移を作ってみる２】
[画面:pic01-10.png 「Playmakerエディタその２」(キャプション)]
１、ジャンプするということは、物理挙動が必要になりますし、地面が必要になります。というわけで、Cubeに「Component」→「Physics」→「Rigidbody」として、物理挙動を付けましょう。それとCubeのちょうど真下に地面のCubeを配置しましょう。
２、Playmakerエディタで、新たに「Jumping」という状態を作って下さい。
３、そこに「Add Force」というアクションを追加して下さい。パラメータは「Y」を「300」に（右の「＝」記号をクリックすることで編集が可能になります）、「Force Mode」を「Impluse」に変更して下さい。
４、「Moving」に遷移を追加して、先ほどと同様「MOUSE DOWN」の遷移条件で新たに作った「Jumping」に繋げましょう。
５、最後に「Jumping」から「Moving」に戻す遷移条件を「FINISHED」にすれば完了です。

仮面：ふう、なんとかできたぞ。って、アキヤマー！！携帯メールしてる場合か！！
秋山：あ、終わりました？いやだって長いんですもん。
仮面：おのれ〜！
秋山：あ、ほんとだ、ジャンプ出来ますねー。こんな短時間で凄いですね！
仮面：お、おう...

仮面：どうだ！？プログラミングできなくてもそれっぽくは出来ただろう？
秋山：一応それっぽくなりましたねー
仮面：感動薄ッ！うすうすだぞ！
秋山：まあ、あんまりゲームっぽくないので。、この後ははゲーム作るところまで行くんですよね！？
仮面：そうだな次回はもう少しイロイロなAsset Storeアイテムを紹介していきたいな。それとアキヤマはどんなゲームが作りたいかを決めてこい。
秋山：ああ、そうですね。ハイスコアガールってマンガ面白いんですけど、それ読んでると2D格闘ゲームか良いですよね。
仮面：また、そういうハードルが高いことを...

----
いかがだったでしょうか？Unityを使っている人に取っては、ちょっと内容が初心者向けだったかもしれません。そういった方々の対象に「One more thing」も用意しております。

【One more thing:Playmaker でのスクリプトとの連動】

・Playmakerアクションによるスクリプト関数呼び出し
　Unityのスクリプトの関数はPlaymaker側からSendMessage経由で呼び出すことが出来ます。アクションの中から「Script Control」というカテゴリの「Send Message」を追加して、「Method Name」に関数名を直接入れれば、呼び出すことができます。また引数もひとつであれば渡すこともできます。

・スクリプトからPlaymakerイベントトリガーの発生
　Playmakerの状態遷移のイベントトリガーをスクリプト側からも呼び出すことができます。
<code>
		PlayMakerFSM playMakerFsm = GetComponent<PlayMakerFSM>();
		playMakerFsm.Fsm.Event("set_event"); // set_eventはイベントトリガー名
</code>

・スクリプトからPLaymakerの変数を変更
　以下のような感じで、直接変数を変更することができます。
<code>
	// add point
	playMakerFsm.FsmVariables.GetFsmInt("point").Value += 100;
</code>

最後にPlaymakerの注意点として一つ書いておくと、全てPlaymakerでやろうとしてはいけない、ということです。Playmakerはどんなことでもやれてしまうのですが、逆にその手間がかかってしまう場面が多くなります。
例えば、ステージギミック等の単純な状態遷移には向いていますが、ゲームのルールや敵のAIなどの複雑な動きなどには適していません。スクリプトで書けば数行のところが、アクションだらけになってしまうはずです。これでは簡単に作るつもりが、余計大変になってしまいます。要はバランスです。使いどころを間違えずに楽しく使いましょう。
